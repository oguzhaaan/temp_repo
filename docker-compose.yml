services:
  postgres:
    image: postgres:latest
    container_name: postgres_multi_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: reservation_db:${RES_DB_USER}:${RES_DB_PASS},user_db:${USER_DB_USER}:${USER_DB_PASS},payment_db:${PAYMENT_DB_USER}:${PAYMENT_DB_PASS}
    volumes:
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - pgdata:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=logical
               -c max_replication_slots=10
               -c max_wal_senders=10
               -c shared_preload_libraries=pgoutput
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "29092:29092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: kafka-cluster-01
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,PLAINTEXT://:29092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: yes
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.9.0
    container_name: kafka-connect
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offset
      CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
    volumes:
      - kafka_connect_plugins:/usr/share/confluent-hub-components
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        echo 'Installing Debezium connector...';
        confluent-hub install debezium/debezium-connector-postgresql:latest --no-prompt &&
        /etc/confluent/docker/run
      "
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9094:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: default
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - kafka

  setup-connector:
    image: curlimages/curl:latest
    container_name: setup-connector
    depends_on:
      kafka-connect:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./PaymentService/config:/config:ro
    command: >
      sh -c '
        echo "Waiting for Kafka Connect...";
        until curl -s -f http://kafka-connect:8083/connectors; do
          echo "Kafka Connect not ready yet, retrying...";
          sleep 5;
        done;
        echo "Registering connector...";
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          --data @/config/debezium-connector-outbox-config.json \
          http://kafka-connect:8083/connectors/);
        if [ "$$RESPONSE" -eq 201 ] || [ "$$RESPONSE" -eq 409 ]; then
          echo "Connector registered successfully (or already exists). Exiting.";
          exit 0;
        else
          echo "Failed to register connector. Status code: $$RESPONSE";
          exit 1;
        fi
      '

  reservation-service:
    build:
      context: ./ReservationService
    container_name: reservation-service
    ports:
      - "8081:8081"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/reservation_db
      DB_USER: ${RES_DB_USER}
      DB_PASSWORD: ${RES_DB_PASS}
      USER_SERVICE_BASE_URL: ${USER_SERVICE_BASE_URL}
      PAYMENT_SERVICE_BASE_URL: ${PAYMENT_SERVICE_BASE_URL}
    depends_on:
      postgres:
        condition: service_healthy

  user-management-service:
    build:
      context: ./UserManagementService
    container_name: user-management-service
    ports:
      - "8082:8082"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/user_db
      DB_USER: ${USER_DB_USER}
      DB_PASSWORD: ${USER_DB_PASS}
    depends_on:
      postgres:
        condition: service_healthy

  payment-service:
    build:
      context: ./PaymentService
    container_name: payment-service
    ports:
      - "8085:8085"
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/payment_db
      DB_USER: ${PAYMENT_DB_USER}
      DB_PASSWORD: ${PAYMENT_DB_PASS}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      PAYPAL_CURRENCY: ${PAYPAL_CURRENCY}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      kafka-connect:
        condition: service_started

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8090:8080"
    restart: always

  reservation-frontend:
    build:
      context: ./reservation-frontend
    container_name: reservation-frontend
    ports:
      - "8080:80"
    depends_on:
      - reservation-service
      - user-management-service
      - payment-service

volumes:
  pgdata:
  kafka_connect_plugins:
